Kubernetes Setup Using Kubeadm In AWS EC2 Ubuntu Servers
========================================================

Prerequisite:
=============

3 - Ubuntu Servers -- 
1 - Manager (4GB RAM , 2 Core)  t2.medium (at least t2.medium for master)
2 - Workers  (1 GB, 1 Core)     t2.micro (at least t2.micro for worker nodes)


Note: Open Required Ports In AWS Security Groups. 
      For now we will open All trafic.

==========COMMON FOR MASTER & WORKER NODES START ====

# First, login as ‘root’ user because the following set of commands need to be executed with ‘sudo’ permissions.

sudo hostnamectl set-hostname master
sudo su -  OR sudo -i

=# Install Required packages and apt keys.

sudo apt-get update -y
sudo apt-get install -y apt-transport-https

sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

apt-get update -y

#Turn Off Swap Space

swapoff -a
sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab


#Install kubeadm, Kubelet And Kubectl containerd

sudo apt-get install -y kubelet containerd kubeadm kubectl kubernetes-cni 

# apt-mark hold will prvent the package from being authomatically upgraded or removed

sudo apt-mark hold kubelet containerd kubeadm kubectl kubernetes-cni 


# helm install javaapp

cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

# Setup required sysctl params, these persist across reboots.
cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system

# Configure containerd:

sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml

# Restart containerd:
sudo systemctl restart containerd

# If you get error related to kubernetes-cni because it already exists, install without kubernetes-cni

# Enable and start kubelet service

sudo systemctl daemon-reload 
sudo systemctl start kubelet 
sudo systemctl enable kubelet.service


===========In Master Node ONLY====================
# Steps Only For Kubernetes Master

# Switch to the root user.

sudo su -

# Initialize Kubernetes master by executing below commond.

sudo kubeadm init        #this will dispaly the kubeadm token which will be used in worker nodes to enable them join the cluster

#exit as root user & execute as normal ubuntu user

sudo su - ubuntu

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# To verify, if kubectl is working or not, run the following command.
kubectl get pods -o wide -n kube-system

#You will notice from the previous command, that all the pods are running except one: ‘core-dns’. 
#To resolve this we will install a # pod network by running the following command bellow; To install the weave pod network, run the following command:

kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"


============Worker Nodes ONLY==============

#copy the command below from master and paste in all worker nodes. This contains the kubeadm token which enables worker nodes join the cluster

kubeadm join 172.31.10.12:6443 --token cdm6fo.dhbrxyleqe5suy6e \
        --discovery-token-ca-cert-hash sha256:1fc51686afd16c46102c018acb71ef9537c1226e331840e7d401630b96298e7d


=============END OF CONFIGURATIOH=============

#Now run the command below to check that worker nodes are ready and cluster is fully configured
kubectl get nodes

#kubectl commands have to be executed in master machine
